GameViewDamageText = {
  texts:[],
  render:function(ctx)
  {
    GameView.renderModeGame();
    var i = this.texts.length;
    while (i--) {
      text = this.texts[i]; 
      ctx.fillStyle="rgba("+text.color+","+text.alpha+")"; 
      ctx.textAlign = 'center'
      ctx.fillText(text.text, text.x, text.y);
    } 
  },
  logic:function()
  {
    var i = this.texts.length
    while (i--) {
      text = this.texts[i]; 
      if(text.frameTotal + text.frameStarted < GameModel.stats.computedFrames)
      {
        this.texts.splice(i, 1);
      } else
      {
        text.y = text.y + text.velocityY;

        if(text.frameTotal + text.frameRampUp > GameModel.stats.computedFrames)
        {
          text.alpha = text.alpha + (1 / text.frameRampUp)
        } else {
          var rampDownProportion = (GameModel.stats.computedFrames - text.frameStarted ) / (text.frameTotal) 
          
          text.alpha = Math.round(Math.pow(Math.cos(0.5* Math.PI * rampDownProportion),2)*1000)/1000;
        }
      }
    }
  },
  addDamageText:function(target, bullet, damage)
  {
    var text= {
      color: bullet.color,
      text: damage,
      x: target.x,
      y: target.y - (0.5)*target.height,
      alpha: 0,
      frameStarted: GameModel.stats.computedFrames,
      frameRampUp: 10,
      frameTotal: 60,
      velocityY: -3
    }
    this.texts.push(text);
  }
}