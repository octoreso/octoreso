var GameBullets={
  bullets:[],
  addBullet:function(ship, type)
  {
    var bulletRotation = ship.rot + (((Math.random()*type.spread)-(type.spread/2))/180*Math.PI)
    //TODO: Accept bullet type etc.
    this.bullets.push({
      faction: ship.faction,
      damage: type.damage, 
      type: type.name,
      x: ship.x,
      y: ship.y,
      xOffset: 0,
      yOffset: -ship.height/2,
      rot: bulletRotation,
      velocityX: type.velocity * Math.sin(bulletRotation) + ship.velocityX, 
      velocityY: type.velocity * -Math.cos(bulletRotation) + ship.velocityY,
      color: ship.color,
      alpha: 1,
      decay: type.decay,
      falloff: type.falloff,
      size: 10
    })
  },
  render:function(ctx)
  {
    GameView.renderModeGame();
    var i = this.bullets.length
    while (i--) {
      bullet = this.bullets[i];
      ctx.fillStyle = "rgba("+bullet.color+","+bullet.alpha+")"
      ctx.translate(bullet.x, bullet.y);
      ctx.rotate(bullet.rot);
      ctx.fillRect(
        bullet.xOffset-0.5,
        bullet.yOffset-0.5,
        2,
        bullet.size
      )
      ctx.rotate(-bullet.rot);
      ctx.translate(-bullet.x, -bullet.y);
    }
  },
  logic:function()
  {
    var i = this.bullets.length
    while (i--) {
      bullet = this.bullets[i]
      bullet.alpha = bullet.alpha * bullet.decay
      bullet.x = bullet.x + bullet.velocityX//*Math.sin(bullet.rot);
      bullet.y = bullet.y + bullet.velocityY//*-Math.cos(bullet.rot);      
      if(bullet.alpha <= bullet.falloff)
      {
        this.bullets.splice(i, 1);
      } 
      else if(bullet.HP <= 0)
      {
        this.bullets.splice(i, 1);
      }
    }
  }
}