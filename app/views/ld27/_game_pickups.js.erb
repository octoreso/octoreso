var GamePickups = {
  pickups:[],
  ammo:{
    shotgun:{
      base: 250,
      rand: 125
    },
    sprayer:{
      base: 30,
      rand: 30
    },
    laser:{
      base: 50,
      rand: 100
    },
    decimator:{
      base: 3,
      rand: 10
    },
    dual:{
      base: 60,
      rand: 30
    },
    triple:{
      base: 50,
      rand: 20
    },
    explosion:{
      base: 1,
      rand: 1
    },
    sweeper:{
      base: 3,
      rand: 10
    },
    sonicboom:{
      base: 10,
      rand: 10
    }

  },
  render:function(ctx)
  {
    for(var i=0;i<this.pickups.length;i++)
    {
      this.pickups[i].render(ctx);
    }
  },
  init:function()
  {    
    this.healthRoll();
    this.munitionsRoll();
  },
  munitionsRoll:function()
  {
    var dropCount=0;

    if(Math.random()<GameModel.bases.pickups.shotgun)
    {
      this.drop('shotgun');
      dropCount++;
    }
    if(Math.random()<GameModel.bases.pickups.sprayer)
    {
      this.drop('sprayer');
      dropCount++;
    }
    if(Math.random()<GameModel.bases.pickups.laser)
    {
      this.drop('laser');
      dropCount++;
    }
    if(Math.random()<GameModel.bases.pickups.decimator)
    {
      this.drop('decimator');
      dropCount++;
    }
    if(Math.random()<GameModel.bases.pickups.dual)
    {
      this.drop('dual');
      dropCount++;
    }
    if(Math.random()<GameModel.bases.pickups.triple)
    {
      this.drop('triple');
      dropCount++;
    }
    if(Math.random()<GameModel.bases.pickups.explosion)
    {
      this.drop('explosion');
      dropCount++;
    }
    if(Math.random()<GameModel.bases.pickups.sweeper)
    {
      this.drop('sweeper');
      dropCount++;
    }
    if(Math.random()<GameModel.bases.pickups.sonicboom)
    {
      this.drop('sonicboom');
      dropCount++;
    }
    return dropCount;
  },
  healthRoll:function()
  {
    var dropCount=0;
    if(Math.random()<GameModel.bases.pickups.heal)
    {
      this.dropHealth('health');
      dropCount++;
    }
  },

  drop:function(pickupName)
  {
    this.pickups.push(new GamePickup(
      GameNPCBases.bases[GameNPCBases.index.MUNITIONS].x -40+(Math.random()*80),  
      GameNPCBases.bases[GameNPCBases.index.MUNITIONS].y,
      20, 20, '255,255,0',pickupName)
    );
  },
  dropHealth:function(pickupName)
  {
    this.pickups.push(new GamePickup(
      GameNPCBases.bases[GameNPCBases.index.REPAIR].x -40+(Math.random()*80),  
      GameNPCBases.bases[GameNPCBases.index.REPAIR].y,
      20, 20, '255,255,0',pickupName)
    );
  },
  dropResource:function(positionX, positionY, resource, magnitude)
  {
    var color = '';
    switch(resource)
    {
      case 'red':
        color = '255,0,0'
      break;
      case 'green':
        color = '0,255,0'
      break;
      case 'blue':
        color = '0,0,255'
      break;
    }

    this.pickups.push(new GamePickup(
      positionX,  
      positionY,
      20, 20, color, resource, 'good', magnitude)
    );
  },
  logic:function()
  {
    for(var i=0;i<this.pickups.length;i++)
    {
      this.pickups[i].logic();
    }
  }
}