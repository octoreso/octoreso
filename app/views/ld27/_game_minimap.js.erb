var GameMinimap={
  SIZE:100,
  buffer:{
    canvas:null,
    ctx: null
  },
  init:function()
  {
    this.buffer.canvas = document.createElement('canvas');
    this.buffer.ctx = this.buffer.canvas.getContext('2d');
    this.buffer.canvas.width = this.SIZE;
    this.buffer.canvas.height = this.SIZE;
    this.buffer.canvas.fillStyle = '#000';
  },
  frame:function(ctx)
  {

    GameView.renderModeUI();
    ctx.translate(GameView.WINDOW_WIDTH-this.SIZE, GameView.WINDOW_HEIGHT-this.SIZE)

    if(GameNPCBases.alive['radar']) { //TODO
      this.renderOutline(ctx);
      //load objects.
      
      this.renderEnemies(ctx);
      this.renderBases(ctx);
      this.renderPlayer(ctx);
      this.renderPickups(ctx);
    } else {
      this.renderBroken(ctx);
    }

    //border outline
    ctx.strokeStyle='#ffffff';
    ctx.strokeRect(
      0,
      0,
      this.SIZE,
      this.SIZE
    )
  },
  renderOutline:function(ctx)
  {
    //border bg
    ctx.fillStyle='#000000';
    ctx.fillRect(
      0,
      0,
      this.SIZE,
      this.SIZE
    );
    //circle outlines
    for(var i=1;i<=4;i++)
    {
      ctx.strokeStyle="#333333";
      ctx.beginPath();
      ctx.arc(
        this.SIZE/2, 
        this.SIZE/2, 
        i*12.5, 
        0, 
        Math.PI*2, 
        true
      ); 
      ctx.closePath();
      ctx.stroke();
    };
  },
  //https://github.com/bahamas10/tvstatic/
  renderBroken:function(ctx)
  {

    //border bg
    ctx.fillStyle='#666666';
    ctx.fillRect(
      0,
      0,
      this.SIZE,
      this.SIZE
    );
    scale = 1;
    var h = this.SIZE;
    var w = this.SIZE;

    this.buffer.ctx.clearRect(0, 0, this.SIZE, this.SIZE);
    // draw the static on the buffer canvas
    for (var x = 0; x < this.SIZE; x+=scale) {
      for (var y = 0; y < this.SIZE; y+=scale) {
        if (Math.round(Math.random()))
          this.buffer.ctx.fillRect(x, y, scale, scale);
      }
    }

    // repeat it onto the real canvas
    for (var x = 0; x < this.SIZE; x += this.SIZE) {
      for (var y = 0; y < this.SIZE; y += this.SIZE) {
        ctx.drawImage(this.buffer.canvas, x, y);
      }
    }

    // draw some horizontal lines on the real canvas
    for (var y = Math.floor(Math.random() * 10); y < this.SIZE; y += Math.floor(Math.random() * 10)) {
      ctx.fillRect(0, y, this.SIZE, Math.floor(Math.random() * 3));
    }
  },
  renderPlayer:function(ctx)
  {
    if(this.withinBounds(GamePlayer.ship))
    {
      ctx.fillStyle="rgb("+GamePlayer.ship.color+")";
      ctx.fillRect(
        GamePlayer.ship.x/GameModel.minimap.ZOOM + 0.5 * this.SIZE -1,
        GamePlayer.ship.y/GameModel.minimap.ZOOM + 0.5 * this.SIZE -1,
        3,
        3
      );
    }
  },
  renderEnemies:function(ctx)
  {
    for(var i=0; i<GameEnemies.enemies.length;i++)
    {
      enemy = GameEnemies.enemies[i].ship;
      if(this.withinBounds(enemy))
      {
        ctx.fillStyle="rgb("+enemy.color+")";
        ctx.fillRect(
          enemy.x/GameModel.minimap.ZOOM + 0.5 * this.SIZE -1,
          enemy.y/GameModel.minimap.ZOOM + 0.5 * this.SIZE -1,
          3,
          3
        );
      }
    }
  },
  renderPickups:function(ctx)
  {
    for(var i=0; i<GamePickups.pickups.length;i++)
    {
      pickup = GamePickups.pickups[i];
      if(this.withinBounds(pickup))
      {
        ctx.fillStyle="rgb("+pickup.color+")";
        ctx.fillRect(
          pickup.x/GameModel.minimap.ZOOM + 0.5 * this.SIZE -1,
          pickup.y/GameModel.minimap.ZOOM + 0.5 * this.SIZE -1,
          3,
          3
        );
      }
    }
  },
  renderBases:function(ctx)
  {
    for(var i=0; i<GameNPCBases.bases.length;i++)
    {
      base = GameNPCBases.bases[i];
      if(this.withinBounds(base))
      {
        ctx.fillStyle="rgb("+base.color+")";
        ctx.fillRect(
          base.x/GameModel.minimap.ZOOM + 0.5 * this.SIZE -1,
          base.y/GameModel.minimap.ZOOM + 0.5 * this.SIZE -1,
          3,
          3
        );
      }
    }
  },
  withinBounds:function(obj)
  {
    return (
      obj.x < GameModel.minimap.MAX_X &&
      obj.x > GameModel.minimap.MIN_X &&
      obj.y < GameModel.minimap.MAX_Y &&
      obj.y > GameModel.minimap.MIN_Y 
    )
  },
  logic:function()
  {
  }

}