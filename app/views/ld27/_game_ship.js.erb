var GameShip = function(x, y, rot, color, type, faction){
  this.ROTATE_LEFT = -1;
  this.ROTATE_RIGHT = 1;
  this.x = x;
  this.y = y;
  
  this.faction = faction || "evil";
  this.auxAmmo = 0;
  
  this.killedAt = null;
  this.deathAnimLength = 60;
  this.rot = rot;
  this.color = color || "255,255,255";
  this.alpha = 1; //cloak?
  this.type = type || 'basic';
  this.turnSpeed=0;
  this.baseMaxThrust=0;
  this.reverseMultiplier = 0.1;

  this.weapons = {
    main: JSON.parse(JSON.stringify(GameBulletTypes.none)), //deep clone
    aux: JSON.parse(JSON.stringify(GameBulletTypes.none))
  }

  switch(this.type)
  {
    case 'basic':
      this.width = 20;
      this.height = 30;
      this.collidableSphereRad = 13
      this.HP = 100;
      this.turnSpeed = 0.3; //degrees to turn 
      this.baseMaxThrust = 30
      this.thrustStep = 0.2;
      this.dragStep = 0.007;

      this.design = [
        { x:-0.5,  y: 0.5  },
        { x: 0,    y:-0.5  },
        { x: 0.5,  y: 0.5  },
        { x: 0,    y: 0.25 },
        { x:-0.5,  y: 0.5 },
      ];
    break;

    case 'fat':
      this.width = 40;
      this.height = 30;
      this.collidableSphereRad = 18
      this.HP = 200;
      this.turnSpeed = 0.05; //degrees to turn 
      this.baseMaxThrust = 20
      this.thrustStep = 0.3;
      this.dragStep = 0.008;
      this.design = [
        { x:-0.5,  y: 0.5  },
        { x: 0,    y:-0.5  },
        { x: 0.5,  y: 0.5  },
        { x: 0,    y: 0.25 },
        { x:-0.5,  y: 0.5 },
      ];
    break;
    case 'scion':
      this.width = 30;
      this.height = 45;
      this.collidableSphereRad = 18
      this.HP = 250;
      this.turnSpeed = 0.1; //degrees to turn 
      this.baseMaxThrust = 30
      this.thrustStep = 0.5;
      this.dragStep = 0.01;
      this.design = [
        { x:-0.5,   y: 0    },
        { x:-0.25,  y: 0.5  },
        { x:-0.05,  y: 0.3  },
        { x:0.05,   y: 0.3  },
        { x:0.25,   y: 0.5  },
        { x:0.5,    y: 0    },
        { x:0,      y: -0.5 }
      ];
    break;
    case 'shard':
      this.width = 45;
      this.height = 135;
      this.collidableSphereRad = 30
      this.HP = 250;
      this.turnSpeed = 0.1; //degrees to turn 
      this.baseMaxThrust = 4
      this.thrustStep = 0.2;
      this.dragStep = 0.01;
      this.design = [
        { x:-0.5,   y: 0    },
        { x:-0.05,  y: 0.3  },
        { x:0.05,   y: 0.3  },
        { x:0.5,    y: 0    },
        { x:0,      y: -0.5 }
      ];
    break;


  }
  this.HPmax = this.HP;
  this.auxAmmoMax = this.auxAmmo;

  this.maxThrust = this.baseMaxThrust; 


  this.velocityX = 0;
  this.velocityY = 0;
  this.equipMainWeapon = function(weapon)
  {
    this.weapons.main = JSON.parse(JSON.stringify(weapon));
  }
  this.equipAuxWeapon = function(weapon,ammo)
  {
    this.auxAmmo = ammo;
    this.auxAmmoMax = ammo;
    this.weapons.aux = JSON.parse(JSON.stringify(weapon));
  }
  this.velocity = function()
  {
    v = Math.pow(Math.pow(this.velocityX,2) + Math.pow(this.velocityY, 2),0.5);
    return v
  }

  this.velocityAngle = function()
  {
    theta = Math.atan2(this.velocityX, this.velocityY);
    if(isNaN(theta)) { theta = 0 }
    return theta;
  }

  

  this.render = function(ctx)
  {
    GameView.renderModeGame();
    ctx.translate(this.x, this.y);
    ctx.rotate(this.rot);

    ctx.fillStyle="rgba(0,0,0,"+this.alpha+")";
    ctx.strokeStyle="rgba("+this.color+","+this.alpha+")";
    
    w = this.width
    h = this.height

    
    ctx.beginPath();
    ctx.moveTo((w*this.design[0].x), (h*this.design[0].y));
    for(var i=1;i<this.design.length;i++)
    {
      ctx.lineTo((w*this.design[i].x), (h*this.design[i].y));
    }
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
 
    ctx.rotate(-this.rot);
    ctx.translate(-this.x, -this.y);
  }

  //test against all the bullets using the ship design as a blueprint for line line tests.
  this.collisionTest = function()
  {
    if(this.killedAt === null)
    {
      for(var i=0;i<GameBullets.bullets.length;i++)
      {
        var bullet = GameBullets.bullets[i];
        var distance = Math.pow(Math.pow(Math.abs(this.x - bullet.x),2) + Math.pow(Math.abs(this.y - bullet.y),2),0.5)
        if(
          distance < this.collidableSphereRad &&  
          this.faction != bullet.faction
        )
        {
          this.collide(bullet);
        }
      }
      var i = GamePickups.pickups.length
      while(i--)
      {
        var pickup = GamePickups.pickups[i];
        var distance = Math.pow(Math.pow(Math.abs(this.x - pickup.x),2) + Math.pow(Math.abs(this.y - pickup.y),2),0.5)
        if(
          distance < pickup.collidableSphereRad
        )
        {
          if(this.faction != pickup.faction)
          {
            GameViewDamageText.addDamageText(this, pickup, 'theft!');
          }
          this.getPickup(pickup);
          GamePickups.pickups.splice(i, 1)
        }
      }

    }
  }

  this.collide = function(bullet)
  {
    //decrement HPs, show damage numbers, kill if dead.
    var dmg = Math.floor(bullet.damage * bullet.alpha); //todo add armor 
    
    this.HP = this.HP - dmg; 
    
    bullet.HP = 0;
    GameViewDamageText.addDamageText(this, bullet, dmg);
  }

  this.getPickup = function(pickup)
  {
    pickup.apply(this);

  }

  this.logic = function()
  {

    if(this.HP <= 0)
    {
      this.kill();
    }

    //be nice about angles so the AI doesn't derp.
    if(this.rot > Math.PI)
    {
      this.rot=(this.rot - Math.PI*2)
    } 
    else if(this.rot < -Math.PI)
    {
      this.rot=(this.rot + Math.PI*2)
    }

    // velocity decay
    var total = this.velocity() * (1- this.dragStep)
    var newX = (Math.sin(this.velocityAngle()) * total);
    var newY = (Math.cos(this.velocityAngle()) * total);
   
    if(!isNaN(newX) && !isNaN(newY))
    {
      this.velocityX = newX;
      this.velocityY = newY;
    }
    this.x = this.x + this.velocityX;
    this.y = this.y + this.velocityY;
    this.collisionTest();
  }

  // direction should be 1 or -1 (cw/anticw.)
  // highervalues allow for faster rotation
  this.rotate = function(direction)
  {
    rotationAmount = (this.turnSpeed * direction * (2*Math.PI) / GameModel.stats.MAX_FPS)
    this.rot = this.rot + rotationAmount;
  }
  this.thrust = function()
  {
    //calculate 
    currentVelocity = this.velocity();
    newX = Math.sin(this.rot)*this.thrustStep;
    newY = -Math.cos(this.rot)*this.thrustStep;
    this.velocityX = this.velocityX + newX;
    this.velocityY = this.velocityY + newY;
    if(GameModel.stats.computedFrames % 6 == 0)
    {
      GameViewParticles.addThrust(this);
    }
  }
  this.reverse_thrust = function()
  {
    //calculate 
    currentVelocity = this.velocity();
    newX = -Math.sin(this.rot)*this.thrustStep*this.reverseMultiplier;
    newY = Math.cos(this.rot)*this.thrustStep*this.reverseMultiplier;
    this.velocityX = this.velocityX + newX;
    this.velocityY = this.velocityY + newY;
  }
  this.fireMain = function()
  {
    if(GameModel.stats.computedFrames - this.weapons.main.lastFired > this.weapons.main.fireRate)
    {
      this.weapons.main.lastFired = GameModel.stats.computedFrames;
      GameBullets.addBullet(this, this.weapons.main);
    }
  }
  this.fireAux = function()
  {
    if(GameModel.stats.computedFrames - this.weapons.aux.lastFired > this.weapons.aux.fireRate)
    {
      this.auxAmmo--;
      this.weapons.aux.lastFired = GameModel.stats.computedFrames;
      
      var bulletCount = 1;
      
      switch(this.weapons.aux.name) {
        case 'dual':
        case 'peatwo':
          bulletCount = 2;
        break;
        case 'triple':
        case 'peathree':
          bulletCount = 3;
        break;
        case 'sprayer':
          bulletCount = 4;
        break;
        case 'sonicboom':
          bulletCount = 30;
        break;
        case 'sweeper':
          bulletCount = 30;
        break;
        case 'decimator':
          bulletCount = 15;
        break;
        case 'explosion':
          bulletCount = 100;
        break;
      }

      for(var i=0;i<bulletCount;i++)
      {
        GameBullets.addBullet(this, this.weapons.aux);
      }
    }
  },
  this.fire = function()
  {
    if(this.auxAmmo > 0)
    {
      this.fireAux();
    } else {
      this.fireMain();
    }
  },
  this.kill=function()
  {
    if(this.killedAt === null) //else already dead!
    {
      this.killedAt = GameModel.stats.computedFrames;
      this.alpha=1;
      this.thrustStep = 0;
      this.turnSpeed = 0;
      //this.faction = 'zombie'
      this.weapons.main = GameBulletTypes.none 
      if(this.faction == 'evil')
      {
        this.attemptDrops();
      }
    }
    

    //each frame of the death.
    if(GameModel.stats.computedFrames - this.killedAt < this.deathAnimLength)
    {
      var animProportion = ((GameModel.stats.computedFrames - this.killedAt) / this.deathAnimLength)
      this.alpha = Math.round(Math.pow(Math.cos(0.5* Math.PI * animProportion),2)*1000)/1000;
    } else {
      this.alpha = 0;
    }

    if(GameModel.stats.computedFrames % 3 == 0)
    {
      GameViewParticles.addThrust(this);
    }

    for(i=0; i<this.design.length;i++)
    {
      vertex = this.design[i];
      theta = (Math.random()*20-10) * (Math.PI/180)

      vertex.x = vertex.x*Math.cos(theta)-vertex.y*Math.sin(theta) 
      vertex.y = vertex.x*Math.sin(theta)+vertex.y*Math.cos(theta)

    }

    this.rot = this.rot + 9 * Math.PI / 180;
    this.height = this.height * 0.98
    this.width = this.width * 0.98
  }
  this.attemptDrops=function()
  {
    var data = GameModel.enemies[this.type].drop
    var dropTypes = ['red','green','blue'];

    for(var i=0;i<dropTypes.length;i++)
    {
      var obj = data[dropTypes[i]]
      if(Math.random() < obj.chance)
      {
        var lvl = Math.floor(GameModel.turnCount/10) + 1;
        var amt = obj.amount + Math.random(
          obj.amountRandom + 
          lvl*obj.amountLevel + 
          lvl*lvl*obj.amountLevelSquared
        )
        GamePickups.dropResource(this.x, this.y, dropTypes[i], Math.floor(amt))
      }
    }

  }
}