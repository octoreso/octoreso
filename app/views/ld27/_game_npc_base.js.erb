var GameNPCBase= function(x, y, w, h, color, type, faction){
  this.HP = 250;
  this.HPmax = 250;
  this.x = x;
  this.y = y;
  this.width = w;
  this.height = h;
  this.collidableSphereRad = (h/2);
  this.deathAnimLength = 150;
  this.color = color;
  this.type = type || 'basic';
  this.rot = 0;
  this.faction = faction || 'good'; 
  this.killedAt = null;
  this.design = [
    { x:-0.5,  y:-0.5  },
    { x:-0.5,  y: 0.5  },
    { x: 0.5,  y: 0.5  },
    { x: 0.5,  y:-0.5  },
    { x:-0.5,  y:-0.5  },
  ];
  this.alpha = 1; //cloak?


  this.render = function(ctx)
  {
    GameView.renderModeGame();
    ctx.translate(this.x, this.y);
   
    if(this.killedAt !== null)
    {
      if(GameModel.stats.computedFrames - this.killedAt < this.deathAnimLength)
      {
        var animProportion = ((GameModel.stats.computedFrames - this.killedAt) / this.deathAnimLength)
        this.alpha = Math.round(Math.pow(Math.cos(0.5* Math.PI * animProportion),2)*1000)/1000;
      } else {
        this.alpha = 0;
      }
    }
    ctx.fillStyle="rgba(0,0,0,"+this.alpha+")";
    ctx.strokeStyle="rgba("+this.color+","+this.alpha+")";
    
    w = this.width
    h = this.height

    
    ctx.beginPath();
    ctx.moveTo((w*this.design[0].x), (h*this.design[0].y));
    for(var i=1;i<this.design.length;i++)
    {
      ctx.lineTo((w*this.design[i].x), (h*this.design[i].y));
    }
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
  
    ctx.fillStyle="rgba("+this.color+","+this.alpha+")";
    ctx.textAlign = 'center'
    ctx.fillText(this.type, 0, 0 - 10);

    ctx.fillStyle="rgba("+this.color+","+(this.alpha/2)+")";
    ctx.fillRect(
      -this.width/2 + 10,
      10,
      this.width-20,
      10
    )
    ctx.fillStyle="rgba("+this.color+","+this.alpha+")";
    ctx.fillRect(
      -this.width/2 + 10,
      10,
      (this.width-20)*(this.HP/this.HPmax),
      10
    )

    ctx.translate(-this.x, -this.y);
  }
  

  //test against all the bullets using the ship design as a blueprint for line line tests.
  this.collisionTest = function()
  {
    if(this.killedAt === null)
    {
      for(var i=0;i<GameBullets.bullets.length;i++)
      {
        var bullet = GameBullets.bullets[i];
        var distance = Math.pow(Math.pow(Math.abs(this.x - bullet.x),2) + Math.pow(Math.abs(this.y - bullet.y),2),0.5)
        if(
          distance < this.collidableSphereRad &&  
          this.faction != bullet.faction
        )
        {
          this.collide(bullet);
        }
      }
    }
  }

  this.collide = function(bullet)
  {
    //decrement HPs, show damage numbers, kill if dead.
    var dmg = Math.floor(bullet.damage * bullet.alpha); //todo add armor 
    
    this.HP = this.HP - dmg; 
    
    bullet.HP = 0;
    GameViewDamageText.addDamageText(this, bullet, dmg);
  }

  this.logic = function()
  {
    this.collisionTest();

    if(this.HP <= 0)
    {
      this.kill();
    }

    // dead bases.
    if(this.killedAt !== null)
    {
      if(GameModel.stats.computedFrames - this.killedAt < this.deathAnimLength)
      {
        var animProportion = ((GameModel.stats.computedFrames - this.killedAt) / this.deathAnimLength)
        this.alpha = Math.round(Math.pow(Math.cos(0.5* Math.PI * animProportion),2)*1000)/1000;
      } else {
        this.alpha = 0;
      }
    }
  }

  this.kill=function()
  {
    if(this.killedAt === null) //else already dead!
    {
      this.killedAt = GameModel.stats.computedFrames;
      this.alpha=1;
      GameNPCBases.alive[this.type] = false

      GameBigText.setText('',this.type+' has been lost','255,0,0',5);

      this.killSpecial();

    }
    //each frame of the death.

    if(GameModel.stats.computedFrames - this.killedAt < this.deathAnimLength)
    {
      var animProportion = ((GameModel.stats.computedFrames - this.killedAt) / this.deathAnimLength)
      this.alpha = Math.round(Math.pow(Math.cos(0.5* Math.PI * animProportion),2)*1000)/1000;

    for(i=0; i<this.design.length;i++)
    {
      vertex = this.design[i];
      theta = (Math.random()*20-10) * (Math.PI/180)

      vertex.x = vertex.x*Math.cos(theta)-vertex.y*Math.sin(theta) 
      vertex.y = vertex.x*Math.sin(theta)+vertex.y*Math.cos(theta)
      GameViewParticles.addThrust(this, vertex.x * this.width, vertex.y * this.height);
    }
    this.height = this.height * 0.98
    this.width = this.width * 0.98

    } else {
      this.alpha = 0;
    }
  }
  this.killSpecial=function()
  {
    if(this.type=='inhibitor')
    {
      GameModel.bases.enemyWaveTick = GameModel.bases.enemyWaveTick / 2 
    }
    if(this.type=='munitions')
    {
      for(var i=0;i<GameModel.bases.pickupDeath;i++)
      {
        GamePickups.munitionsRoll();
      }
    }
  }
}