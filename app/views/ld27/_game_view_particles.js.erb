GameViewParticles = {
  STAR_COUNT:3000,
  stars:[],
  thrust:[],
  MIN_X:null,
  MIN_Y:null,
  MAX_X:null,
  MAX_Y:null,
  STARFIELD_WIDTH:null,
  STARFIELD_HEIGHT:null,
  init:function()
  {
    //set maximum bounds for the particles to be within, based on max zoomage.
    this.MIN_X = -2000
    this.MAX_X = 2000
    this.MIN_Y = -2000
    this.MAX_Y = 2000
    this.STARFIELD_WIDTH  = this.MAX_X - this.MIN_X
    this.STARFIELD_HEIGHT = this.MAX_Y - this.MIN_Y
    for(var i=0;i<this.STAR_COUNT;i++)
    {
      var star = {};
      this.initStar(star);
      this.stars.push(star)
    }
  },

  frame:function(ctx)
  {

    GameView.renderModeUI()
    ctx.fillStyle="rgb(255,255,255)";
    for(var i=0;i<this.stars.length;i++)
    {
      var star = this.stars[i];
      this.frameStar(ctx, star);
    }
    GameView.renderModeGame()
    for(var i=0;i<this.thrust.length;i++)
    {
      var part = this.thrust[i];
      this.frameThrust(ctx, part);
    }

  },
  initStar:function(star)
  {
    star.z = 3 + Math.round(Math.random()*9); //apply square power later when scrolling.
    star.x = Math.round((Math.random()*this.STARFIELD_WIDTH)  + this.MIN_X);
    star.y = Math.round((Math.random()*this.STARFIELD_HEIGHT) + this.MIN_Y);
      
  },
  frameStar:function(ctx, star)
  {
      //TO REVISIT: Parallax Scrolling!
      //      if(star.y-(GamePlayer.ship.y) > this.MAX_Y){
      //        star.y = star.y - (this.STARFIELD_HEIGHT);
      //      }
      //      if(star.y-(GamePlayer.ship.y) < this.MIN_Y){
      //        star.y = star.y + (this.STARFIELD_HEIGHT);
      //      }
      //      if(star.x-(GamePlayer.ship.x) > this.MAX_X){
      //        star.x = star.x - (this.STARFIELD_WIDTH);
      //      }
      //      if(star.x-(GamePlayer.ship.x) < this.MIN_X){
      //        star.x = star.x + (this.STARFIELD_WIDTH);
      //      }

      ctx.beginPath();
      ctx.arc(
        (star.x- (GamePlayer.ship.x/star.z)), 
        (star.y- (GamePlayer.ship.y/star.z)), 
        0.5 + ((10-star.z)/10), 
        0, 
        Math.PI*2, 
        true
      ); 
      ctx.closePath();
      ctx.fill();
  },
  frameThrust:function(ctx, thrust)
  {
      ctx.fillStyle="rgba("+thrust.color+","+thrust.alpha+")"
      ctx.translate(thrust.x, thrust.y);
      ctx.rotate(thrust.rot);
      ctx.fillRect(
        thrust.xOffset-0.5,
        thrust.yOffset-0.5,
        2,
        10
      )

      ctx.rotate(-thrust.rot);
      ctx.translate(-thrust.x, -thrust.y);
      
  },
  addThrust:function(ship,xOffset, yOffset)
  {
    xOffset = xOffset || 0;
    yOffset = yOffset || 0;
    this.thrust.push({
      x: ship.x,
      y: ship.y,
      xOffset: xOffset + 0,
      yOffset: yOffset + ship.height/4,
      rot: ship.rot + (((Math.random()*30)-15)/180*Math.PI),
      color: "255,"+(Math.round(Math.random()*200)+55).toString()+",0",
      alpha: 0.7
    })
  },
  logic:function()
  {
    var i = this.thrust.length
    while (i--) {
      this.thrust[i].alpha=this.thrust[i].alpha * 0.97
      if(this.thrust[i].alpha <= 0.01)
      {
        this.thrust.splice(i, 1);
      }
    }
  }
}