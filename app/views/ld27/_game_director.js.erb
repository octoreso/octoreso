GameDirector={
  logic:function()
  {
    if(GameModel.stats.computedFrames % (GameModel.bases.enemyWaveTick) == 0)
    {
      //TODO: Levelled list of increasingly hard/frequent enemies!
      this.turn();
    }
  },
  turn:function()
  {

    GameModel.turnCount++;
    if(GameModel.turnCount % 10 == 0)
    {
      this.levelUp();
    }
    if(GameNPCBases.alive.munitions)
    {
      GamePickups.munitionsRoll();
      GamePickups.healthRoll();
    }
    
    this.spawnEnemies();
    if(GameNPCBases.alive.inhibitor == false)
    {
      this.spawnEnemies();
    }
  },
  levelUp:function()
  {
    GameBigText.setText('level up','base slightly repaired','0,255,0',2);
    for(i=0;i<GameNPCBases.bases.length;i++)
    {
      var base = GameNPCBases.bases[i];
      if(base.HP > 0)
      {
        base.HP = Math.min(base.HP + (base.HPmax*GameModel.bases.levelupRepair),base.HPmax);
      }
    }
  },
  spawnEnemies:function()
  {
    var enemiesSpawned = 0;
    enemiesSpawned += this.attemptSpawn('basic');  
    enemiesSpawned += this.attemptSpawn('fat');  
    enemiesSpawned += this.attemptSpawn('scion');  
    enemiesSpawned += this.attemptSpawn('shard');  
    
  },
  attemptSpawn:function(type)
  {
    var cfg = GameModel.enemies[type];
    var lvl = Math.floor(GameModel.turnCount/10)

    var qty    = cfg.initialQty    + (cfg.levelQty    * lvl)
    var chance = cfg.initialChance + (cfg.levelChance * lvl)

    //guaranteed.
    while(chance > 1)
    {
      chance = chance - 1
      for(var i=Math.ceil(Math.random()*qty);i>=1;i--)
      {
        GameEnemies.addEnemy(type,lvl);
      }
    }
    //check chance
    if(Math.random() < chance)
    {
      for(var i=Math.ceil(Math.random()*qty);i>=1;i--)
      {
        GameEnemies.addEnemy(type,lvl);
      }
    }
  }
}